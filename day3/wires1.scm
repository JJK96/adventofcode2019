(import srfi-1)
(import srfi-13)
(import matchable)
(import (chicken format))
(import (chicken io))
(import (chicken string))
(import list-comprehensions)
(import (chicken sort))

(define (decode direction)
    (list (string-take direction 1) (string->number (string-drop direction 1))))

(define (move start direction num)
    (define-values (steps pos) (apply values start))
    (define-values (x y) (apply values pos))
    (define new-pos (list (+ steps 1) (match direction
                                            ["U" (list x (+ y 1))]
                                            ["D" (list x (- y 1))]
                                            ["L" (list (- x 1) y)]
                                            ["R" (list (+ x 1) y)])))
    (define new-num (- num 1))
    (if (= new-num 0)
        (list new-pos)
        (cons new-pos (move new-pos direction new-num))))

(define (plot start directions)
    (define direction (decode (car directions)))
    (define-values (dir num) (apply values direction))
    (define positions (move start dir num))
    (define new-directions (cdr directions))
    (if (= (length new-directions) 0)
        positions
        (append positions (plot (last positions) new-directions))))

(define input (read-string #f (open-input-file "input")))
(define input (map (lambda (input) (string-split input ",")) (string-split input "\n")))
(define first-plot (plot '(0 (0 0)) (first input)))
(define second-plot (plot '(0 (0 0)) (second input)))
(define (compare-list a b)
    (define (lexicographic x)
        (if (null? x)
            #f
            (or (apply < (car x)) (and (apply = (car x)) (lexicographic (cdr x))))))
    (lexicographic (zip a b)))
(define (sort-plot plot) (sort plot (lambda (x y) (compare-list (second x) (second y)))))
(define first-plot (sort-plot first-plot))
(define second-plot (sort-plot second-plot))
(define (find-common a b)
    (if (or (null? a) (null? b))
        '()
        (let ((aa (second (car a)))
              (bb (second (car b))))
           (if (equal? aa bb)
               (cons (+ (car (car a)) (car (car b))) (find-common (cdr a) (cdr b)))
               (if (compare-list aa bb)
                   (find-common (cdr a) b)
                   (find-common a (cdr b)))))))
(define intersections (find-common first-plot second-plot))
(printf "1: ~a\n" (car (sort intersections <)))
